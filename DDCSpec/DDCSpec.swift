import XCTest

import Quick
import Nimble

@testable import DDC

let LENOVO_YOGA_2: [UInt8] = [
  0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x06, 0xaf, 0x2d, 0x20, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x16, 0x01, 0x04, 0x90, 0x1d, 0x11, 0x78, 0x02, 0xbc, 0x05, 0xa2, 0x55, 0x4c, 0x9a, 0x25,
  0x0e, 0x50, 0x54, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1d, 0x36, 0x80, 0xa0, 0x70, 0x38, 0x1e, 0x40, 0x30, 0x20,
  0x8e, 0x00, 0x25, 0xa5, 0x10, 0x00, 0x00, 0x18, 0x1d, 0x36, 0x80, 0x08, 0x72, 0x38, 0x66, 0x40,
  0x30, 0x20, 0x8e, 0x00, 0x25, 0xa5, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x41,
  0x55, 0x4f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0xfe,
  0x00, 0x42, 0x31, 0x33, 0x33, 0x48, 0x41, 0x4e, 0x30, 0x32, 0x2e, 0x30, 0x20, 0x0a, 0x00, 0x43,
]

let DELL_P2415Q: [UInt8] = [
  0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x10, 0xac, 0xc0, 0xa0, 0x4c, 0x55, 0x36, 0x30,
  0x2d, 0x18, 0x01, 0x03, 0x80, 0x35, 0x1e, 0x78, 0xea, 0xe2, 0x45, 0xa8, 0x55, 0x4d, 0xa3, 0x26,
  0x0b, 0x50, 0x54, 0xa5, 0x4b, 0x00, 0x71, 0x4f, 0x81, 0x80, 0xa9, 0xc0, 0xa9, 0x40, 0xd1, 0xc0,
  0xe1, 0x00, 0x01, 0x01, 0x01, 0x01, 0xa3, 0x66, 0x00, 0xa0, 0xf0, 0x70, 0x1f, 0x80, 0x30, 0x20,
  0x35, 0x00, 0x0f, 0x28, 0x21, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xff, 0x00, 0x50, 0x32, 0x50,
  0x43, 0x32, 0x34, 0x42, 0x34, 0x30, 0x36, 0x55, 0x4c, 0x0a, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x44,
  0x45, 0x4c, 0x4c, 0x20, 0x50, 0x32, 0x34, 0x31, 0x35, 0x51, 0x0a, 0x20, 0x00, 0x00, 0x00, 0xfd,
  0x00, 0x1d, 0x4c, 0x1e, 0x8c, 0x1e, 0x00, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x01, 0x96,
  0x02, 0x03, 0x2a, 0xf1, 0x53, 0x90, 0x05, 0x04, 0x02, 0x07, 0x16, 0x01, 0x14, 0x1f, 0x12, 0x13,
  0x27, 0x20, 0x21, 0x22, 0x03, 0x06, 0x11, 0x15, 0x23, 0x09, 0x07, 0x07, 0x6d, 0x03, 0x0c, 0x00,
  0x10, 0x00, 0x30, 0x3c, 0x20, 0x00, 0x60, 0x03, 0x02, 0x01, 0x02, 0x3a, 0x80, 0x18, 0x71, 0x38,
  0x2d, 0x40, 0x58, 0x2c, 0x25, 0x00, 0x0f, 0x28, 0x21, 0x00, 0x00, 0x1f, 0x01, 0x1d, 0x80, 0x18,
  0x71, 0x1c, 0x16, 0x20, 0x58, 0x2c, 0x25, 0x00, 0x0f, 0x28, 0x21, 0x00, 0x00, 0x9e, 0x04, 0x74,
  0x00, 0x30, 0xf2, 0x70, 0x5a, 0x80, 0xb0, 0x58, 0x8a, 0x00, 0x0f, 0x28, 0x21, 0x00, 0x00, 0x1e,
  0x56, 0x5e, 0x00, 0xa0, 0xa0, 0xa0, 0x29, 0x50, 0x30, 0x20, 0x35, 0x00, 0x0f, 0x28, 0x21, 0x00,
  0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf9,
]

// Samsung LS23ELDKF (a.k.a. Samsung SyncMaster XL2370HD)
let SAMSUMG_LS23ELDKF : [UInt8] = [
  0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x4c, 0x2d, 0x2a, 0x07, 0x33, 0x32, 0x30, 0x37,
  0x0e, 0x14, 0x01, 0x03, 0x80, 0x33, 0x1d, 0x78, 0x2a, 0x81, 0xf1, 0xa3, 0x57, 0x53, 0x9f, 0x27,
  0x0a, 0x50, 0x54, 0xbf, 0xef, 0x80, 0x81, 0x00, 0x95, 0x00, 0xb3, 0x00, 0x81, 0x40, 0x71, 0x4f,
  0x81, 0x80, 0xa9, 0x40, 0x95, 0x0f, 0x02, 0x3a, 0x80, 0x18, 0x71, 0x38, 0x2d, 0x40, 0x58, 0x2c,
  0x45, 0x00, 0xfe, 0x1f, 0x11, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x38, 0x4b, 0x1e,
  0x51, 0x11, 0x00, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x53,
  0x4d, 0x58, 0x4c, 0x32, 0x33, 0x37, 0x30, 0x48, 0x44, 0x0a, 0x20, 0x20, 0x00, 0x00, 0x00, 0xff,
  0x00, 0x48, 0x31, 0x41, 0x4b, 0x35, 0x30, 0x30, 0x30, 0x30, 0x30, 0x0a, 0x20, 0x20, 0x00, 0xa1,
]

// LG 38UC99-W
let LG_38UC99_W: [UInt8] = [
  0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x1e, 0x6d, 0xfc, 0x76, 0x0c, 0xd3, 0x05, 0x00,
  0x0a, 0x1b, 0x01, 0x04, 0xb5, 0x57, 0x25, 0x78, 0x9f, 0xca, 0x95, 0xa6, 0x55, 0x4e, 0xa1, 0x26,
  0x0f, 0x50, 0x54, 0x04, 0x63, 0x80, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0xd1, 0xcf, 0x85, 0xcf, 0x00, 0x20, 0xf1, 0x40, 0x74, 0x60, 0x30, 0x20,
  0x7a, 0x00, 0x6a, 0x6e, 0x31, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x34,
  0x4b, 0x7d, 0x7d, 0x36, 0x01, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0xfc,
  0x00, 0x4c, 0x47, 0x20, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x57, 0x49, 0x44, 0x45, 0x0a, 0x01, 0xb4,
]

func lenovo() -> EDID? {
  return EDID(data: LENOVO_YOGA_2)
}

func dell() -> EDID? {
  return EDID(data: DELL_P2415Q)
}

func samsung() -> EDID? {
  return EDID(data: SAMSUMG_LS23ELDKF)
}

func lg() -> EDID? {
  return EDID(data: LG_38UC99_W)
}

class EDIDSpec: QuickSpec {
  override func spec() {
    describe(".init(data: [UInt8])") {
      it("returns nil if the input array is empty") {
        expect { EDID(data: []) }.to(beNil())
      }

      it("returns nil if the input array contains less than 128 bytes") {
        expect {
          EDID(data: [
            0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          ])
        }.to(beNil())
      }

      it("returns nil if the checksum is not valid") {
        expect {
          EDID(data: [
            0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          ])
        }.to(beNil())
      }

      it("returns nil if the header is not valid") {
        expect {
          EDID(data: [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          ])
        }.to(beNil())
      }

      it("does not return nil if both the header and checksum are valid") {
        expect {
          EDID(data: [
            0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
          ])
        }.notTo(beNil())
      }
    }

    describe(".header") {
      it("is 0x00ffffffffffff00 when the EDID is valid") {
        expect { EDID(data: LG_38UC99_W)?.header }.to(equal(0x00ffffffffffff00))
      }
    }

    describe(".manufacturerString()") {
      it("returns the manufacturer ID string") {
        expect { lenovo()?.manufacturerString() }.to(equal("AUO")) // AU Optronics
        expect { dell()?.manufacturerString() }.to(equal("DEL"))
        expect { samsung()?.manufacturerString() }.to(equal("SAM"))
        expect { lg()?.manufacturerString() }.to(equal("GSM")) // GoldStar
      }
    }

    describe(".edidVersionString()") {
      it("returns the EDID versions string") {
        expect { lenovo()?.edidVersionString() }.to(equal("1.4"))
        expect { dell()?.edidVersionString() }.to(equal("1.3"))
        expect { samsung()?.edidVersionString() }.to(equal("1.3"))
        expect { lg()?.edidVersionString() }.to(equal("1.4"))
      }
    }

    describe(".week") {
      it("returns the manufacturing week") {
        expect { lenovo()?.week }.to(equal(0))
        expect { dell()?.week }.to(equal(45))
        expect { samsung()?.week }.to(equal(14))
        expect { lg()?.week }.to(equal(10))
      }
    }

    describe(".year") {
      it("returns the manufacturing year") {
        expect { lenovo()?.year }.to(equal(2012))
        expect { dell()?.year }.to(equal(2014))
        expect { samsung()?.year }.to(equal(2010))
        expect { lg()?.year }.to(equal(2017))
      }
    }

    describe(".extensions") {
      it("returns the number of extensions") {
        expect { lenovo()?.extensions }.to(equal(0))
        expect { dell()?.extensions }.to(equal(1))
        expect { samsung()?.extensions }.to(equal(0))
        expect { lg()?.extensions }.to(equal(1))
      }
    }

    describe(".screenWidth") {
      it("returns the width of the screen") {
        expect { lenovo()?.screenWidth }.to(equal(Measurement(value: 29, unit: UnitLength.centimeters)))
        expect { dell()?.screenWidth }.to(equal(Measurement(value: 53, unit: UnitLength.centimeters)))
        expect { samsung()?.screenWidth }.to(equal(Measurement(value: 51, unit: UnitLength.centimeters)))
        expect { lg()?.screenWidth }.to(equal(Measurement(value: 87, unit: UnitLength.centimeters)))
      }
    }

    describe(".screenHeight") {
      it("returns the height of the screen") {
        expect { lenovo()?.screenHeight }.to(equal(Measurement(value: 17, unit: UnitLength.centimeters)))
        expect { dell()?.screenHeight }.to(equal(Measurement(value: 30, unit: UnitLength.centimeters)))
        expect { samsung()?.screenHeight }.to(equal(Measurement(value: 29, unit: UnitLength.centimeters)))
        expect { lg()?.screenHeight }.to(equal(Measurement(value: 37, unit: UnitLength.centimeters)))
      }
    }

    describe(".productCode") {
      it("is little-endian") {
        expect { lenovo()?.productCode }.to(equal(0x202D))
        expect { dell()?.productCode }.to(equal(0xA0C0))
        expect { samsung()?.productCode }.to(equal(0x072A))
        expect { lg()?.productCode }.to(equal(0x76FC))
      }
    }

    describe(".serialNumber") {
      it("is little-endian") {
        expect { lenovo()?.serialNumber }.to(equal(0))
        expect { dell()?.serialNumber }.to(equal(808867148))
        expect { samsung()?.serialNumber }.to(equal(925905459))
        expect { lg()?.serialNumber }.to(equal(381708))
      }
    }

    describe(".gamma") {
      it("returns the height of the screen") {
        expect { lenovo()?.gamma }.to(equal(2.2))
        expect { dell()?.gamma }.to(equal(2.2))
        expect { samsung()?.gamma }.to(equal(2.2))
        expect { lg()?.gamma }.to(equal(2.2))
      }
    }
  }
}
